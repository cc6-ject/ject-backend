# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  test:
    docker:
      # specify the version you desire here
      - image: circleci/node:10.11
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Install NodeJS packages
          command: yarn install --production=false
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Test Serverless app
          command: yarn test
      - persist_to_workspace:
          root: ~/repo
          paths:
            - ./*

  deploy-dev:
    docker:
      - image: circleci/node:10.11
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          # After yarn global add, it cannot find serverless.
          name: Install serverless CLI
          command: yarn add serverless
      - run:
          name: Set BACKEND_STAGE
          command: export BACKEND_STAGE=`echo $BACKEND_STAGE_DEV` && echo $BACKEND_STAGE
      - run:
          name: Deploy serverless to AWS
          command: yarn serverless deploy -v --stage dev

  deploy-prod:
    docker:
      - image: circleci/node:10.11
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Install serverless CLI
          command: yarn add serverless
      - run:
          name: Set BACKEND_STAGE
          command: export BACKEND_STAGE=`echo $BACKEND_STAGE_PROD` && echo $BACKEND_STAGE
      - run:
          name: Deploy serverless to AWS
          command: yarn serverless deploy -v --stage prod

workflows:
  version: 2
  build-deploy:
    jobs:
      - test
      - deploy-dev:
          requires:
            - test
      - deploy-prod:
          requires:
            - test
          filters:
            branches:
              only: master
